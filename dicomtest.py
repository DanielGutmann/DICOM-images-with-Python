#The following code sample demonstrates some of the powerful functionality
#available in Python and the Pydicom library that can be used to manipulate
#DICOM (Digital Imaging and Communications in Medicine) images in Python.
#The library can be very helpful if you don't have access to Matlab licenses or
#similar image analysis platforms.  This is mainly geared to scientists and
#engineers who work with DICOM medical images in a clinical or non-clinical
#environment, but it may be of interest to physicians, clinical and
#technical staff at hospitals as well.  In addition to this code, the console
#output generated by this code and a snapshot of the image has been provided.




#Library in Python used to import and manipulate DICOM data in Python
import pydicom



#Numeric Python library for working with arrays provides numerical computation
#functional comparable to MATLAB including arrays
import numpy as np



#Use the Pyplot module from the matplotlib library
#Gives very helpful plotting functionality for displaying graphs and images.
from matplotlib import pyplot as plt



#Read in the DICOM image into a variable.  The image is in the same
#folder as the project to keep things simple.
#This file can have a .dcm extension, but a lot of DICOM
#files don't necessarily have this extension, depending on where
#you get the images from.
ds = pydicom.read_file("IM_0054")



#Example of accessing patient name tag and printing
#it from the DICOM image.  If the tag has been
#de-identified, nothing will print.
print(ds.PatientName)



#Print the contents of the patient ID tag.
print(ds.PatientID)



#Print the value of the date of birth tag, but access the tag
#using its tag number identifier instead of the tag name.
#To protect patient privacy, this tag has been changed to a
#default January 1st date.
print(ds[0x10,0x30].value)       #DOB identified by tag number



#Print the number of rows tag value of the DICOM image.
print(ds.Rows)



#Print the study instance ID tag value, but access it
#via the tag number.
print(ds[0x20, 0x0d].value)  #Study instance ID



#Print any DICOM tag labels that contain the characters
#"pat" in their name.  This will print out all
#relevant tag labels that meet this criterion.
print(ds.dir("pat"))



#Print the imaging system manufacturer tag value.
print(ds.Manufacturer)



#Put the entire dicom image into a pixel array and print out the array
#values.  Need the numpy library to be able to do this.
#Usually, you won't want to print this out but instead store it in a variable.
#Therefore, the print command has been commented out to save space on output.
#print(ds.pixel_array)



#Print the dimensions of the pixel array.
print(ds.pixel_array.shape)



#print the type of data that is contained
#in the pixel array of the image.
print(ds.pixel_array.dtype)



#Print the maximum value of the pixel array of the image.
print(np.amax(ds.pixel_array))



#Return index of maximum value in the image.  The first number
#is the row index, the second number is the column.
indices = np.where(ds.pixel_array == np.max(ds.pixel_array))



#Print the value of the matrix index where maximum was found.
print(indices)



#Change patient name.  It is possible to change the values in each DICOM tag
#and this command is an example of that.
ds.PatientName = 'Test_Patient'



#print the entire list of dicom tags to console output using the dir command.
print(ds.dir)



#Check to see if the patient DICOM tag is in the DICOM file.  Returns
#a boolean of true or false after evaluating the condition in brackets.
print("PatientName" in ds)



#Create a figure to display the DICOM image.
plt.figure()



#Set up the DICOM image for display, using an
#appropriate colormap, which is greyscale in this case.
plt.imshow(ds.pixel_array, cmap = "gray")



#Show the DICOM image on the figure.
plt.show()

